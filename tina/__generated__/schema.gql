# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  navigation(relativePath: String): Navigation!
  navigationConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NavigationFilter): NavigationConnection!
  hero(relativePath: String): Hero!
  heroConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: HeroFilter): HeroConnection!
  services(relativePath: String): Services!
  servicesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ServicesFilter): ServicesConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
  clients(relativePath: String): Clients!
  clientsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ClientsFilter): ClientsConnection!
  websites(relativePath: String): Websites!
  websitesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: WebsitesFilter): WebsitesConnection!
}

input DocumentFilter {
  navigation: NavigationFilter
  hero: HeroFilter
  services: ServicesFilter
  contact: ContactFilter
  clients: ClientsFilter
  websites: WebsitesFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Navigation | Hero | Services | Contact | Clients | Websites | Folder

type NavigationLinks {
  label: String
  url: String
}

type Navigation implements Node & Document {
  logo: String!
  links: [NavigationLinks]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input NavigationLinksFilter {
  label: StringFilter
  url: StringFilter
}

input NavigationFilter {
  logo: ImageFilter
  links: NavigationLinksFilter
}

type NavigationConnectionEdges {
  cursor: String!
  node: Navigation
}

type NavigationConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NavigationConnectionEdges]
}

type Hero implements Node & Document {
  title: String!
  description: String
  promotionImage: String
  buttonText: String!
  buttonLink: String!
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input HeroFilter {
  title: StringFilter
  description: StringFilter
  promotionImage: ImageFilter
  buttonText: StringFilter
  buttonLink: StringFilter
}

type HeroConnectionEdges {
  cursor: String!
  node: Hero
}

type HeroConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [HeroConnectionEdges]
}

type ServicesServices {
  title: String
  description: String
  ServiceImage: String
}

type Services implements Node & Document {
  services: [ServicesServices]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ServicesServicesFilter {
  title: StringFilter
  description: StringFilter
  ServiceImage: ImageFilter
}

input ServicesFilter {
  services: ServicesServicesFilter
}

type ServicesConnectionEdges {
  cursor: String!
  node: Services
}

type ServicesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ServicesConnectionEdges]
}

type Contact implements Node & Document {
  whatsappLink: String!
  whatsappText: String
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactFilter {
  whatsappLink: StringFilter
  whatsappText: StringFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type ClientsClients {
  name: String
  logo: String
}

type Clients implements Node & Document {
  clients: [ClientsClients]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ClientsClientsFilter {
  name: StringFilter
  logo: ImageFilter
}

input ClientsFilter {
  clients: ClientsClientsFilter
}

type ClientsConnectionEdges {
  cursor: String!
  node: Clients
}

type ClientsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ClientsConnectionEdges]
}

type WebsitesWebsites {
  url: String!
}

type Websites implements Node & Document {
  websites: [WebsitesWebsites]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input WebsitesWebsitesFilter {
  url: StringFilter
}

input WebsitesFilter {
  websites: WebsitesWebsitesFilter
}

type WebsitesConnectionEdges {
  cursor: String!
  node: Websites
}

type WebsitesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [WebsitesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  createNavigation(relativePath: String!, params: NavigationMutation!): Navigation!
  updateHero(relativePath: String!, params: HeroMutation!): Hero!
  createHero(relativePath: String!, params: HeroMutation!): Hero!
  updateServices(relativePath: String!, params: ServicesMutation!): Services!
  createServices(relativePath: String!, params: ServicesMutation!): Services!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
  updateClients(relativePath: String!, params: ClientsMutation!): Clients!
  createClients(relativePath: String!, params: ClientsMutation!): Clients!
  updateWebsites(relativePath: String!, params: WebsitesMutation!): Websites!
  createWebsites(relativePath: String!, params: WebsitesMutation!): Websites!
}

input DocumentUpdateMutation {
  navigation: NavigationMutation
  hero: HeroMutation
  services: ServicesMutation
  contact: ContactMutation
  clients: ClientsMutation
  websites: WebsitesMutation
  relativePath: String
}

input DocumentMutation {
  navigation: NavigationMutation
  hero: HeroMutation
  services: ServicesMutation
  contact: ContactMutation
  clients: ClientsMutation
  websites: WebsitesMutation
}

input NavigationLinksMutation {
  label: String
  url: String
}

input NavigationMutation {
  logo: String
  links: [NavigationLinksMutation]
}

input HeroMutation {
  title: String
  description: String
  promotionImage: String
  buttonText: String
  buttonLink: String
}

input ServicesServicesMutation {
  title: String
  description: String
  ServiceImage: String
}

input ServicesMutation {
  services: [ServicesServicesMutation]
}

input ContactMutation {
  whatsappLink: String
  whatsappText: String
}

input ClientsClientsMutation {
  name: String
  logo: String
}

input ClientsMutation {
  clients: [ClientsClientsMutation]
}

input WebsitesWebsitesMutation {
  url: String
}

input WebsitesMutation {
  websites: [WebsitesWebsitesMutation]
}

schema {
  query: Query
  mutation: Mutation
}

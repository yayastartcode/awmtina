//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  navigation: Navigation;
  navigationConnection: NavigationConnection;
  hero: Hero;
  heroConnection: HeroConnection;
  services: Services;
  servicesConnection: ServicesConnection;
  contact: Contact;
  contactConnection: ContactConnection;
  clients: Clients;
  clientsConnection: ClientsConnection;
  websites: Websites;
  websitesConnection: WebsitesConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNavigationArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNavigationConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NavigationFilter>;
};


export type QueryHeroArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryHeroConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeroFilter>;
};


export type QueryServicesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryServicesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServicesFilter>;
};


export type QueryContactArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContactConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
};


export type QueryClientsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryClientsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ClientsFilter>;
};


export type QueryWebsitesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryWebsitesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WebsitesFilter>;
};

export type DocumentFilter = {
  navigation?: InputMaybe<NavigationFilter>;
  hero?: InputMaybe<HeroFilter>;
  services?: InputMaybe<ServicesFilter>;
  contact?: InputMaybe<ContactFilter>;
  clients?: InputMaybe<ClientsFilter>;
  websites?: InputMaybe<WebsitesFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Navigation | Hero | Services | Contact | Clients | Websites | Folder;

export type NavigationLinks = {
  __typename?: 'NavigationLinks';
  label?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
};

export type Navigation = Node & Document & {
  __typename?: 'Navigation';
  logo: Scalars['String']['output'];
  links?: Maybe<Array<Maybe<NavigationLinks>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type NavigationLinksFilter = {
  label?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
};

export type NavigationFilter = {
  logo?: InputMaybe<ImageFilter>;
  links?: InputMaybe<NavigationLinksFilter>;
};

export type NavigationConnectionEdges = {
  __typename?: 'NavigationConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Navigation>;
};

export type NavigationConnection = Connection & {
  __typename?: 'NavigationConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NavigationConnectionEdges>>>;
};

export type Hero = Node & Document & {
  __typename?: 'Hero';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  promotionImage?: Maybe<Scalars['String']['output']>;
  buttonText: Scalars['String']['output'];
  buttonLink: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type HeroFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  promotionImage?: InputMaybe<ImageFilter>;
  buttonText?: InputMaybe<StringFilter>;
  buttonLink?: InputMaybe<StringFilter>;
};

export type HeroConnectionEdges = {
  __typename?: 'HeroConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Hero>;
};

export type HeroConnection = Connection & {
  __typename?: 'HeroConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<HeroConnectionEdges>>>;
};

export type ServicesServices = {
  __typename?: 'ServicesServices';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  ServiceImage?: Maybe<Scalars['String']['output']>;
};

export type Services = Node & Document & {
  __typename?: 'Services';
  services?: Maybe<Array<Maybe<ServicesServices>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ServicesServicesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  ServiceImage?: InputMaybe<ImageFilter>;
};

export type ServicesFilter = {
  services?: InputMaybe<ServicesServicesFilter>;
};

export type ServicesConnectionEdges = {
  __typename?: 'ServicesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Services>;
};

export type ServicesConnection = Connection & {
  __typename?: 'ServicesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ServicesConnectionEdges>>>;
};

export type Contact = Node & Document & {
  __typename?: 'Contact';
  whatsappLink: Scalars['String']['output'];
  whatsappText?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContactFilter = {
  whatsappLink?: InputMaybe<StringFilter>;
  whatsappText?: InputMaybe<StringFilter>;
};

export type ContactConnectionEdges = {
  __typename?: 'ContactConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Contact>;
};

export type ContactConnection = Connection & {
  __typename?: 'ContactConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContactConnectionEdges>>>;
};

export type ClientsClients = {
  __typename?: 'ClientsClients';
  name?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
};

export type Clients = Node & Document & {
  __typename?: 'Clients';
  clients?: Maybe<Array<Maybe<ClientsClients>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ClientsClientsFilter = {
  name?: InputMaybe<StringFilter>;
  logo?: InputMaybe<ImageFilter>;
};

export type ClientsFilter = {
  clients?: InputMaybe<ClientsClientsFilter>;
};

export type ClientsConnectionEdges = {
  __typename?: 'ClientsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Clients>;
};

export type ClientsConnection = Connection & {
  __typename?: 'ClientsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ClientsConnectionEdges>>>;
};

export type WebsitesWebsites = {
  __typename?: 'WebsitesWebsites';
  url: Scalars['String']['output'];
};

export type Websites = Node & Document & {
  __typename?: 'Websites';
  websites?: Maybe<Array<Maybe<WebsitesWebsites>>>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type WebsitesWebsitesFilter = {
  url?: InputMaybe<StringFilter>;
};

export type WebsitesFilter = {
  websites?: InputMaybe<WebsitesWebsitesFilter>;
};

export type WebsitesConnectionEdges = {
  __typename?: 'WebsitesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Websites>;
};

export type WebsitesConnection = Connection & {
  __typename?: 'WebsitesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<WebsitesConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateNavigation: Navigation;
  createNavigation: Navigation;
  updateHero: Hero;
  createHero: Hero;
  updateServices: Services;
  createServices: Services;
  updateContact: Contact;
  createContact: Contact;
  updateClients: Clients;
  createClients: Clients;
  updateWebsites: Websites;
  createWebsites: Websites;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateNavigationArgs = {
  relativePath: Scalars['String']['input'];
  params: NavigationMutation;
};


export type MutationCreateNavigationArgs = {
  relativePath: Scalars['String']['input'];
  params: NavigationMutation;
};


export type MutationUpdateHeroArgs = {
  relativePath: Scalars['String']['input'];
  params: HeroMutation;
};


export type MutationCreateHeroArgs = {
  relativePath: Scalars['String']['input'];
  params: HeroMutation;
};


export type MutationUpdateServicesArgs = {
  relativePath: Scalars['String']['input'];
  params: ServicesMutation;
};


export type MutationCreateServicesArgs = {
  relativePath: Scalars['String']['input'];
  params: ServicesMutation;
};


export type MutationUpdateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationCreateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationUpdateClientsArgs = {
  relativePath: Scalars['String']['input'];
  params: ClientsMutation;
};


export type MutationCreateClientsArgs = {
  relativePath: Scalars['String']['input'];
  params: ClientsMutation;
};


export type MutationUpdateWebsitesArgs = {
  relativePath: Scalars['String']['input'];
  params: WebsitesMutation;
};


export type MutationCreateWebsitesArgs = {
  relativePath: Scalars['String']['input'];
  params: WebsitesMutation;
};

export type DocumentUpdateMutation = {
  navigation?: InputMaybe<NavigationMutation>;
  hero?: InputMaybe<HeroMutation>;
  services?: InputMaybe<ServicesMutation>;
  contact?: InputMaybe<ContactMutation>;
  clients?: InputMaybe<ClientsMutation>;
  websites?: InputMaybe<WebsitesMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  navigation?: InputMaybe<NavigationMutation>;
  hero?: InputMaybe<HeroMutation>;
  services?: InputMaybe<ServicesMutation>;
  contact?: InputMaybe<ContactMutation>;
  clients?: InputMaybe<ClientsMutation>;
  websites?: InputMaybe<WebsitesMutation>;
};

export type NavigationLinksMutation = {
  label?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
};

export type NavigationMutation = {
  logo?: InputMaybe<Scalars['String']['input']>;
  links?: InputMaybe<Array<InputMaybe<NavigationLinksMutation>>>;
};

export type HeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  promotionImage?: InputMaybe<Scalars['String']['input']>;
  buttonText?: InputMaybe<Scalars['String']['input']>;
  buttonLink?: InputMaybe<Scalars['String']['input']>;
};

export type ServicesServicesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  ServiceImage?: InputMaybe<Scalars['String']['input']>;
};

export type ServicesMutation = {
  services?: InputMaybe<Array<InputMaybe<ServicesServicesMutation>>>;
};

export type ContactMutation = {
  whatsappLink?: InputMaybe<Scalars['String']['input']>;
  whatsappText?: InputMaybe<Scalars['String']['input']>;
};

export type ClientsClientsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
};

export type ClientsMutation = {
  clients?: InputMaybe<Array<InputMaybe<ClientsClientsMutation>>>;
};

export type WebsitesWebsitesMutation = {
  url?: InputMaybe<Scalars['String']['input']>;
};

export type WebsitesMutation = {
  websites?: InputMaybe<Array<InputMaybe<WebsitesWebsitesMutation>>>;
};

export type NavigationPartsFragment = { __typename: 'Navigation', logo: string, links?: Array<{ __typename: 'NavigationLinks', label?: string | null, url?: string | null } | null> | null };

export type HeroPartsFragment = { __typename: 'Hero', title: string, description?: string | null, promotionImage?: string | null, buttonText: string, buttonLink: string };

export type ServicesPartsFragment = { __typename: 'Services', services?: Array<{ __typename: 'ServicesServices', title?: string | null, description?: string | null, ServiceImage?: string | null } | null> | null };

export type ContactPartsFragment = { __typename: 'Contact', whatsappLink: string, whatsappText?: string | null };

export type ClientsPartsFragment = { __typename: 'Clients', clients?: Array<{ __typename: 'ClientsClients', name?: string | null, logo?: string | null } | null> | null };

export type WebsitesPartsFragment = { __typename: 'Websites', websites?: Array<{ __typename: 'WebsitesWebsites', url: string } | null> | null };

export type NavigationQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NavigationQuery = { __typename?: 'Query', navigation: { __typename: 'Navigation', id: string, logo: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, links?: Array<{ __typename: 'NavigationLinks', label?: string | null, url?: string | null } | null> | null } };

export type NavigationConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NavigationFilter>;
}>;


export type NavigationConnectionQuery = { __typename?: 'Query', navigationConnection: { __typename?: 'NavigationConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NavigationConnectionEdges', cursor: string, node?: { __typename: 'Navigation', id: string, logo: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, links?: Array<{ __typename: 'NavigationLinks', label?: string | null, url?: string | null } | null> | null } | null } | null> | null } };

export type HeroQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type HeroQuery = { __typename?: 'Query', hero: { __typename: 'Hero', id: string, title: string, description?: string | null, promotionImage?: string | null, buttonText: string, buttonLink: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type HeroConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<HeroFilter>;
}>;


export type HeroConnectionQuery = { __typename?: 'Query', heroConnection: { __typename?: 'HeroConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'HeroConnectionEdges', cursor: string, node?: { __typename: 'Hero', id: string, title: string, description?: string | null, promotionImage?: string | null, buttonText: string, buttonLink: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ServicesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ServicesQuery = { __typename?: 'Query', services: { __typename: 'Services', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, services?: Array<{ __typename: 'ServicesServices', title?: string | null, description?: string | null, ServiceImage?: string | null } | null> | null } };

export type ServicesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ServicesFilter>;
}>;


export type ServicesConnectionQuery = { __typename?: 'Query', servicesConnection: { __typename?: 'ServicesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ServicesConnectionEdges', cursor: string, node?: { __typename: 'Services', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, services?: Array<{ __typename: 'ServicesServices', title?: string | null, description?: string | null, ServiceImage?: string | null } | null> | null } | null } | null> | null } };

export type ContactQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContactQuery = { __typename?: 'Query', contact: { __typename: 'Contact', id: string, whatsappLink: string, whatsappText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } };

export type ContactConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
}>;


export type ContactConnectionQuery = { __typename?: 'Query', contactConnection: { __typename?: 'ContactConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContactConnectionEdges', cursor: string, node?: { __typename: 'Contact', id: string, whatsappLink: string, whatsappText?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string } } | null } | null> | null } };

export type ClientsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ClientsQuery = { __typename?: 'Query', clients: { __typename: 'Clients', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, clients?: Array<{ __typename: 'ClientsClients', name?: string | null, logo?: string | null } | null> | null } };

export type ClientsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ClientsFilter>;
}>;


export type ClientsConnectionQuery = { __typename?: 'Query', clientsConnection: { __typename?: 'ClientsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ClientsConnectionEdges', cursor: string, node?: { __typename: 'Clients', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, clients?: Array<{ __typename: 'ClientsClients', name?: string | null, logo?: string | null } | null> | null } | null } | null> | null } };

export type WebsitesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type WebsitesQuery = { __typename?: 'Query', websites: { __typename: 'Websites', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, websites?: Array<{ __typename: 'WebsitesWebsites', url: string } | null> | null } };

export type WebsitesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<WebsitesFilter>;
}>;


export type WebsitesConnectionQuery = { __typename?: 'Query', websitesConnection: { __typename?: 'WebsitesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'WebsitesConnectionEdges', cursor: string, node?: { __typename: 'Websites', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, websites?: Array<{ __typename: 'WebsitesWebsites', url: string } | null> | null } | null } | null> | null } };

export const NavigationPartsFragmentDoc = gql`
    fragment NavigationParts on Navigation {
  __typename
  logo
  links {
    __typename
    label
    url
  }
}
    `;
export const HeroPartsFragmentDoc = gql`
    fragment HeroParts on Hero {
  __typename
  title
  description
  promotionImage
  buttonText
  buttonLink
}
    `;
export const ServicesPartsFragmentDoc = gql`
    fragment ServicesParts on Services {
  __typename
  services {
    __typename
    title
    description
    ServiceImage
  }
}
    `;
export const ContactPartsFragmentDoc = gql`
    fragment ContactParts on Contact {
  __typename
  whatsappLink
  whatsappText
}
    `;
export const ClientsPartsFragmentDoc = gql`
    fragment ClientsParts on Clients {
  __typename
  clients {
    __typename
    name
    logo
  }
}
    `;
export const WebsitesPartsFragmentDoc = gql`
    fragment WebsitesParts on Websites {
  __typename
  websites {
    __typename
    url
  }
}
    `;
export const NavigationDocument = gql`
    query navigation($relativePath: String!) {
  navigation(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NavigationParts
  }
}
    ${NavigationPartsFragmentDoc}`;
export const NavigationConnectionDocument = gql`
    query navigationConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NavigationFilter) {
  navigationConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NavigationParts
      }
    }
  }
}
    ${NavigationPartsFragmentDoc}`;
export const HeroDocument = gql`
    query hero($relativePath: String!) {
  hero(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...HeroParts
  }
}
    ${HeroPartsFragmentDoc}`;
export const HeroConnectionDocument = gql`
    query heroConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: HeroFilter) {
  heroConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...HeroParts
      }
    }
  }
}
    ${HeroPartsFragmentDoc}`;
export const ServicesDocument = gql`
    query services($relativePath: String!) {
  services(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ServicesParts
  }
}
    ${ServicesPartsFragmentDoc}`;
export const ServicesConnectionDocument = gql`
    query servicesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ServicesFilter) {
  servicesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ServicesParts
      }
    }
  }
}
    ${ServicesPartsFragmentDoc}`;
export const ContactDocument = gql`
    query contact($relativePath: String!) {
  contact(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContactParts
  }
}
    ${ContactPartsFragmentDoc}`;
export const ContactConnectionDocument = gql`
    query contactConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContactFilter) {
  contactConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContactParts
      }
    }
  }
}
    ${ContactPartsFragmentDoc}`;
export const ClientsDocument = gql`
    query clients($relativePath: String!) {
  clients(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ClientsParts
  }
}
    ${ClientsPartsFragmentDoc}`;
export const ClientsConnectionDocument = gql`
    query clientsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ClientsFilter) {
  clientsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ClientsParts
      }
    }
  }
}
    ${ClientsPartsFragmentDoc}`;
export const WebsitesDocument = gql`
    query websites($relativePath: String!) {
  websites(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...WebsitesParts
  }
}
    ${WebsitesPartsFragmentDoc}`;
export const WebsitesConnectionDocument = gql`
    query websitesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: WebsitesFilter) {
  websitesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...WebsitesParts
      }
    }
  }
}
    ${WebsitesPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      navigation(variables: NavigationQueryVariables, options?: C): Promise<{data: NavigationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationQueryVariables, query: string}> {
        return requester<{data: NavigationQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationQueryVariables, query: string}, NavigationQueryVariables>(NavigationDocument, variables, options);
      },
    navigationConnection(variables?: NavigationConnectionQueryVariables, options?: C): Promise<{data: NavigationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationConnectionQueryVariables, query: string}> {
        return requester<{data: NavigationConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NavigationConnectionQueryVariables, query: string}, NavigationConnectionQueryVariables>(NavigationConnectionDocument, variables, options);
      },
    hero(variables: HeroQueryVariables, options?: C): Promise<{data: HeroQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroQueryVariables, query: string}> {
        return requester<{data: HeroQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroQueryVariables, query: string}, HeroQueryVariables>(HeroDocument, variables, options);
      },
    heroConnection(variables?: HeroConnectionQueryVariables, options?: C): Promise<{data: HeroConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroConnectionQueryVariables, query: string}> {
        return requester<{data: HeroConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: HeroConnectionQueryVariables, query: string}, HeroConnectionQueryVariables>(HeroConnectionDocument, variables, options);
      },
    services(variables: ServicesQueryVariables, options?: C): Promise<{data: ServicesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesQueryVariables, query: string}> {
        return requester<{data: ServicesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesQueryVariables, query: string}, ServicesQueryVariables>(ServicesDocument, variables, options);
      },
    servicesConnection(variables?: ServicesConnectionQueryVariables, options?: C): Promise<{data: ServicesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesConnectionQueryVariables, query: string}> {
        return requester<{data: ServicesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ServicesConnectionQueryVariables, query: string}, ServicesConnectionQueryVariables>(ServicesConnectionDocument, variables, options);
      },
    contact(variables: ContactQueryVariables, options?: C): Promise<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}> {
        return requester<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}, ContactQueryVariables>(ContactDocument, variables, options);
      },
    contactConnection(variables?: ContactConnectionQueryVariables, options?: C): Promise<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}> {
        return requester<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}, ContactConnectionQueryVariables>(ContactConnectionDocument, variables, options);
      },
    clients(variables: ClientsQueryVariables, options?: C): Promise<{data: ClientsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ClientsQueryVariables, query: string}> {
        return requester<{data: ClientsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ClientsQueryVariables, query: string}, ClientsQueryVariables>(ClientsDocument, variables, options);
      },
    clientsConnection(variables?: ClientsConnectionQueryVariables, options?: C): Promise<{data: ClientsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ClientsConnectionQueryVariables, query: string}> {
        return requester<{data: ClientsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ClientsConnectionQueryVariables, query: string}, ClientsConnectionQueryVariables>(ClientsConnectionDocument, variables, options);
      },
    websites(variables: WebsitesQueryVariables, options?: C): Promise<{data: WebsitesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WebsitesQueryVariables, query: string}> {
        return requester<{data: WebsitesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WebsitesQueryVariables, query: string}, WebsitesQueryVariables>(WebsitesDocument, variables, options);
      },
    websitesConnection(variables?: WebsitesConnectionQueryVariables, options?: C): Promise<{data: WebsitesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WebsitesConnectionQueryVariables, query: string}> {
        return requester<{data: WebsitesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: WebsitesConnectionQueryVariables, query: string}, WebsitesConnectionQueryVariables>(WebsitesConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  